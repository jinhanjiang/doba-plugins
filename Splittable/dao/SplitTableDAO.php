<?php
namespace Doba\Dao;

use \Exception;
use Doba\BaseDAO;
use Doba\Dao\SplitDAO;
abstract class SplitTableDAO extends SplitDAO
{
    /**
     * split table type , by quarter
     * @var int
     */
    const SPLIT_BY_QUARTER = 1;

    /**
     * split table tyep, by half year
     * @var int
     */
    const SPLIT_BY_HALF_YEAR = 2;


    /**
     * current splat table tyep
     * @var int
     */
    protected $splitTableType = self::SPLIT_BY_QUARTER;

    /**
     * backup table object
     * @var object
     */
    private $backupTableDAO = NULL;
    
    /**
     * pid generator object
     * @var object
     */
    private $pidGeneratorDAO = NULL;

    /**
     * construct method
     */
    protected function __construct($tableName, $options=array()) 
    {
        if(isset($options['backupTableDAO'])) $this->backupTableDAO = $options['backupTableDAO'];
        if(isset($options['pidGeneratorDAO'])) $this->pidGeneratorDAO = $options['pidGeneratorDAO'];
        if(isset($options['splitTableType'])) {
            $this->splitTableType =  $options['splitTableType'];
            switch($this->splitTableType)
            {
                case self::SPLIT_BY_QUARTER: $options['tableCount'] = 4; break;
                case self::SPLIT_BY_HALF_YEAR: $options['tableCount'] = 2; break;
                default: $options['tableCount'] = 0; break;
            }
        }
        parent::__construct($tableName, $options);
    }

    /**
     * Gets backup table instance
     * @return object
     */
    protected function getBackupTableDAO() {
        if(! $this->backupTableDAO) throw new Exception('You need to set the backup table name.', 99030002);
        return call_user_func(array($this->backupTableDAO, 'me'));
    }

    /**
     * Gets pid generator instance
     * @return object
     */
    protected function getPidGeneratorDAO() {
        if(! $this->pidGeneratorDAO) throw new Exception('You need to set the pid generator name.', 99030003);
        return call_user_func(array($this->pidGeneratorDAO, 'me'));
    }
    
    public function getOriginalTableName() {
        return $this->originaltbname;
    }

    /**
     * Gets the current table number by date or pid(data unique identifier)
     * 
     * @param  array $params array('pid', 'dateCode')
     * @return int
     */
    public function getSpCode($params) 
    {
        $dateCode = 0;
        if(isset($params['pid'])) {
            $dateCode = $this->pidToDateCode($params['pid']);
        } else if(isset($params['dateCode'])) {
            $dateCode = intval($params['dateCode']);
        }
        if($dateCode == 0 || intval(strtotime($dateCode)) == 0) return -1;

        $spCode = -1;
        switch($this->splitTableType)
        {
            case self::SPLIT_BY_QUARTER:
                $monthCode = intval(date('n', strtotime(strval($dateCode)))); // get month
                if($monthCode <= 3) $spCode = 0;
                else if($monthCode <= 6) $spCode = 1;
                else if($monthCode <= 9) $spCode = 2;
                else $spCode = 3;        
                break;
            case self::SPLIT_BY_HALF_YEAR: 
                // The data from January to June are stored in table 0, and the data in July and December is saved in table 1
                $spCode = intval(date('n', strtotime(strval($dateCode))))  > 6 ? 1 : 0;
                break;
        }
        return $spCode;
    }

    /**
     * Example:unique id：118005000000001 规则： 1(default) 18（2018） 000（he first day of 2018, which is the table suffix of the table） 00000001（generated by PidGenerator）
     *
     * @param int $dateCode
     * @return int
     */
    protected function genPid($dateCode = 0) 
    {
        $dateCodeUnix = ($unix = strtotime($dateCode)) > 0 ? $unix : time();
        $dateCode = date('Ymd', $dateCodeUnix);
        $id = $this->getPidGeneratorDAO()->insert(array()); $dCode = date('z', $dateCodeUnix);

        $pid = '1'.date('y', $dateCodeUnix).str_pad($dCode, 3, '0', STR_PAD_LEFT).str_pad($id, 9, '0', STR_PAD_LEFT);

        $spCode = $this->getSpCode(array('dateCode'=>$dateCode));
        $obj = $this->finds(array('selectCase' => 'COUNT(id) AS id', 'spCode'=>$spCode, 'pid' => $pid));
        return $obj[0]->id > 0 ? $this->genPid($dateCode) : $pid;
    }

    /**
     * Gets data through pid
     *
     * @param int
     * @return object
     */
    public function get($pid=0)
    {
        $dateCode = $this->pidToDateCode($pid);
        if(! $dateCode) return NULL;
        $objs = $this->queryBy(
            array(
                'selectCase'=>'*', 
                'limit'=>1, 
                'pid'=>$pid,
                'dateCode'=>$dateCode,
            )
        );
        return ($objs[0]->id > 0) ? $objs[0] : NULL;
    }

    /**
     * Delete data
     */
    public function delete($pid=0) 
    {
        $spCode = $this->getSpCode(array('pid'=>$pid)); 
        if(-1 == $spCode) return 0;
        $objs = $this->finds(
            array(
                'selectCase'=>'id,pid', 
                'limit'=>1, 
                'spCode'=>$spCode, 
                'pid'=>$pid,
            )
        );
        if(isset($objs[0])) {
            try{
                $this->begin();
                $this->table($spCode);
                parent::delete($objs[0]->id);
                $this->getBackupTableDAO()->delete($objs[0]->pid);
                $this->commit();
                return $objs[0]->pid;
            } catch(Exception $ex) {
                $this->rollback();
                return 0;
            }
        }
        else
        {
            $this->getBackupTableDAO()->delete($pid);
            return $pid;
        }
    }

    /**
     * Add data into db
     */
    public function insert($params) 
    {
        $spCode = $this->getSpCode(array('dateCode'=>$params['dateCode'])); 
        if(empty($params['dateCode']) || -1 == $spCode) return 0;

        $params['pid'] = $this->genPid($params['dateCode']);
        $params['_INSERT_IGONRE'] = true;

        try{
            $this->begin();
            $this->table($spCode);
            parent::insert($params);
            $this->getBackupTableDAO()->sync($params['pid']);
            $this->commit();
            return $params['pid'];
        } catch(Exception $ex) {
            $this->rollback();
        }
        return 0;
    }

    /**
     * Modify the data
     */
    public function change($pid=0, $params) 
    {
        $spCode = $this->getSpCode(array('pid'=>$pid)); 
        if(-1 == $spCode) return 0;
        $objs = $this->finds(
            array(
                'selectCase'=>'id,pid',
                'limit'=>1, 
                'spCode'=>$spCode, 
                'pid'=>$pid,
            )
        );
        unset($params['id'], $params['pid']);
        if(isset($objs[0])) {
            try{
                $this->begin();
                $this->table($spCode);
                parent::change($objs[0]->id, $params);
                $this->getBackupTableDAO()->sync($objs[0]->pid);
                $this->commit();
                return $objs[0]->pid;
            } catch(Exception $ex) {
                $this->rollback();
            } 
        }
        else {
            $id = $this->getBackupTableDAO()->change($pid, $params);
            if($id > 0) return $pid;
        }
        return 0;
    }

    /**
     * Query data
     */
    public function finds($params) 
    {
        if(is_numeric($params['spCode']) && -1 != $params['spCode']) {
            $this->table($params['spCode']);
            return parent::finds($params);
        } else if(is_array($params['spCode'])) {
            if(count($params['spCode']) == 1) {
                return $this->finds(array('spCode'=>$params['spCode'][0]) + $params);
            }
            else if(count($params['spCode']) > 1) {
                $params['spCodes'] = $params['spCode']; unset($params['spCode']);
                return $this->findsByUnionAll($params);
            }
        } else {
            return $this->findsByUnionAll($params);
        }
    }

    /**
     * Query data by dateCode conditions
     * 
     * @param  array  $params      array('dateCode', 'dateCodeGeq', 'dateCodeLeq')
     * @return array
     */
    public function queryBy($params)
    {
        $queryConds = $this->getQuerySpConds($params);
        if(! $queryConds || 0 == intval($queryConds['type'])) return array();//Not sure which table to query from

        $datas = array();
        if(1 == $queryConds['type']) $datas = $this->finds(array('spCode'=>$queryConds['spCode']) + $params);
        else {
            $datas = $this->getBackupTableDAO()->finds(array('spCode'=>$queryConds['spCode']) + $params);
            $this->lastQuerySql = $this->getBackupTableDAO()->sql();
        }
        return $datas;
    }

    /**
     * Gets the table query condition
     *
     * 1 Two-quarter data query, need to query in two tables
     * 2 Three-quarter data query, need to query in the backup table
     * 3 backup table data query, pay attention to the new year
     * 
     * for example:
     * if the current year is July 2018(201807), input parameter dateCode=20170101, the result of returned is 
     * array(type=1, spCode=array(0))
     * 
     * if you query data for a perod of time, you need to pass in a data range, such as dateCodeGeq, dateCodeLeq
     * date range(dateCodeGeq:20170301 - dateCodeLeq:20170401), because March is in the first quarter, April is the second quarter
     * array(type=1, spCodes=array(0, 1))
     * 
     * 3 Query across year date(dateCodeGeq:20161201 - dateCodeLeq:20170101)
     * array(type=2, spCodes=array(16, 17))
     * 
     * Meet the following conditions, use this method
     * (eg:2003，Xxx_3, 2017, Xxx_17)
     * 
     * @param  array $params array('dateCode', 'dateCodeGeq', 'dateCodeLeq')
     * @return array array('type', 'spCode')
     */
    public function getQuerySpConds($params)
    {
        $initYear = $this->getBackupTableDAO()->getEarliestQueryYear();//earliest query year
        $compareDateCode = date('Ymd', strtotime('-6 month')); //Current table queries maximum range

        $type = 0; $spCodes = array();
        if(isset($params['dateCode']))
        {
            $unix = strtotime($params['dateCode']);
            $year = date('Y', $unix);

            if($year < $initYear) return array();//even earlier than the earliest year
            if($params['dateCode'] < $compareDateCode) 
            {
                // last year table query
                $spCodes = array(intval(substr($year, -2)));
                $type = 2;
            }
            else
            {
                $spCodes = array($this->getSpCode(array('dateCode'=>$params['dateCode'])));
                $type = 1;
            }
        }
        else if(isset($params['dateCodeGeq']))
        {       
            $params['dateCodeLeq'] = isset($params['dateCodeLeq']) ? $params['dateCodeLeq'] : date('Ymd'); 
            $fromUnix = strtotime($params['dateCodeGeq']); $toUnix = strtotime($params['dateCodeLeq']);

            //The start time is greater than the end time, no query
            if($fromUnix > $toUnix) return array();

            $fyear = date('Y', $fromUnix); $tyear = date('Y', $toUnix);

            // 1 even earlier than the earliest year
            if($fyear < $initYear && $tyear < $initYear) return array();
            // 2 One of the two time periods exceeds the backup year, starting from the backup year
            if($fyear < $initYear) $fyear = $initYear;
            if($tyear < $initYear) $tyear = $initYear;
            
            if(date('Ymd', $fromUnix) > $compareDateCode && date('Ymd', $toUnix) > $compareDateCode)
            {
                $type = 1;
                if(date('n', $fromUnix) == date('n', $toUnix)) {
                    $spCodes = array($this->getSpCode(array('dateCode'=>$params['dateCodeGeq'])));
                }
                else
                {
                    $endMonth = date('n', $toUnix); $tempDateCode = $params['dateCodeGeq']; $i=0;
                    while(true) {
                        $spCode = $this->getSpCode(array('dateCode'=>$tempDateCode));
                        if(! in_array($spCode, $spCodes)) $spCodes[] = $spCode;

                        $tempMonth = date('n', strtotime($tempDateCode));
                        if($endMonth == $tempMonth || ++$i > 12) break;

                        $tempDateCode = date('Ymd', strtotime("{$tempDateCode} +1 month"));
                    }
                }
            }
            else
            {
                // Query data from the backup table
                if($fyear == $tyear) $spCodes = array(intval(substr($fyear, -2)));
                else
                {
                    $endYearCode = intval(date('y', $toUnix)); $tempDateCode = $params['dateCodeGeq']; $i=0;
                    while(true) {
                        $spCode = intval(date('y', strtotime($tempDateCode)));
                        $spCodes[] = $spCode;

                        if($spCode == $endYearCode || ++$i > 99) break;

                        $tempDateCode = date('Ymd', strtotime("{$tempDateCode} +1 year"));
                    }    
                }
                $type = 2;
            }
        }
        else {
            return array();
        }
        return array('type'=>$type, 'spCode'=>$spCodes);
    }

    /**
     * Get all years between two years, for example: array(16, 17, 18, 19)
     */
    public function getYearsByRange($date1, $date2=0)
    {
        $dUnix1 = strtotime($date1);
        $dUnix2 = strtotime($date2); $dUnix2 = $dUnix2 > 0 ? $dUnix2 : time();
        if($dUnix1 > 0)
        {
            $y1 = date('y', $dUnix1); $y2 = date('y', $dUnix2);
            if($y1 == $y2) return array($y1); 
            if($dUnix1 < $dUnix2)
            { 
                $codes = array(); $i=0;
                while(true) {
                    $y1 = date('y', strtotime("first day of +{$i} year", $dUnix1));
                    $codes[] = $y1;
                    if($y1 == $y2) break;
                    if($i > 100) break;
                    $i++;
                }
                return $codes;
            }
            else {
                return array(date('y', $dUnix1));
            }
        }
        else {
            return array(date('y'));
        }
    }
}